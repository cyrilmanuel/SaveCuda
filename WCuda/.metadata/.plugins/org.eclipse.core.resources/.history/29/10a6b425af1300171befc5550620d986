#include "Indice2D.h"
#include "Indice1D.h"
#include "cudaTools.h"

#include "reductionADD.h"
#include <stdio.h>



/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Imported	 	*|
 \*-------------------------------------*/


/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

__global__ void Slice(float* ptrDevV1, float* ptrDevV2, float* ptrDevW,int n);

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/


static __device__ void reductionIntraThread(float* ptrDevGM, int nbSlice, float Resultat);

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/


/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/**
 * output : void required !!
 */
__global__ void Slice(float* ptrGMResultat, int nbSlice)
    {
    extern __shared__ float tabSM[];
    reductionIntraThread(tabSM, nbSlice);
    __syncthread();
    reductionADD<float>( tabSM,  *ptrGMResultat);
    }


/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/


__device__ void reductionIntraThread(float* tabSM, int nbSlice)
    {
    const int NB_THREAD=Indice1D::nbThread();
    const int TID=Indice1D::tid();

    int s = TID;
    float sumLocal = 0;
       while (s<nbSlice)
   	{
	sumLocal+=aireRectangle(s);
	tabSM[s] = sumLocal;
   	s+= NB_THREAD;
   	}
    }


__device__ void aireRectangle(int s){

}
/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/

