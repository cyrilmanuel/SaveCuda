#include "Slice.h"

#include <iostream>

#include "Device.h"
#include <cmath>

using std::cout;
using std::endl;

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Imported	 	*|
 \*-------------------------------------*/
#define PI 3.14159265358979323846264338327950288419716939937510


extern __global__ void Slice(float* ptrGMResultat, int nbSlice);

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Constructeur			*|
 \*-------------------------------------*/

Slice::Slice(const Grid& grid, int nbSlice, float tolerance)
{
    // Grid
   	{
   	this->dg = grid.dg;
   	this->db = grid.db;
   	}

    this->sizeOctet = db.x*db.y *db.z* sizeof(float);
    this->tolerance = tolerance;
    this->pi = 0.f;
    this->nbSlice = nbSlice;

	{

	// MM (malloc Device)
	    {
	    Device::malloc(&ptrGMDevResultat, sizeof(float));
	    Device::memclear(ptrGMDevResultat, sizeof(float));
	    }
	Device::lastCudaError("slice MM (end allocation)"); // temp debug, facultatif
	}
    }

Slice::~Slice(void)
    {
    //MM (device free)
	{
	Device::free(ptrGMDevResultat);
	Device::lastCudaError("AddVector MM (end deallocation)"); // temp debug, facultatif
	}
    }

/*--------------------------------------*\
 |*		Methode			*|
 \*-------------------------------------*/

float Slice::run()
    {
    Device::lastCudaError("slice (before)"); // temp debug
    Slice<<<dg,db>>>(ptrGMResultat, nbSlice); // assynchrone
    Device::lastCudaError("slice (after)"); // temp debug

    Device::synchronize(); // Temp,debug, only for printf in  GPU

    // MM (Device -> Host)
	{
	Device::memcpyDToH(&pi, ptrGMDevResultat, sizeof(float)); // barriere synchronisation implicite
	}

	return pi;
    }

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/
